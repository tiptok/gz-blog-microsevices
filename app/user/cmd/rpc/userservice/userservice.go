// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"github.com/tiptok/gz-blog-microsevices/api/protobuf/user/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest        = v1.CreateUserRequest
	CreateUserResponse       = v1.CreateUserResponse
	DeleteUserRequest        = v1.DeleteUserRequest
	DeleteUserResponse       = v1.DeleteUserResponse
	GetUserByEmailRequest    = v1.GetUserByEmailRequest
	GetUserByUsernameRequest = v1.GetUserByUsernameRequest
	GetUserRequest           = v1.GetUserRequest
	GetUserResponse          = v1.GetUserResponse
	ListUsersByIDsRequest    = v1.ListUsersByIDsRequest
	ListUsersByIDsResponse   = v1.ListUsersByIDsResponse
	UpdateUserRequest        = v1.UpdateUserRequest
	UpdateUserResponse       = v1.UpdateUserResponse
	User                     = v1.User

	UserService interface {
		ListUsersByIDs(ctx context.Context, in *ListUsersByIDsRequest, opts ...grpc.CallOption) (*ListUsersByIDsResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) ListUsersByIDs(ctx context.Context, in *ListUsersByIDsRequest, opts ...grpc.CallOption) (*ListUsersByIDsResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.ListUsersByIDs(ctx, in, opts...)
}

func (m *defaultUserService) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByEmail(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByUsername(ctx, in, opts...)
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := v1.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}
