// Code generated by goctl. DO NOT EDIT!
// Source: post.proto

package server

import (
	"context"

	"github.com/tiptok/gz-blog-microsevices/api/protobuf/post/v1"
	"github.com/tiptok/gz-blog-microsevices/app/post/cmd/rpc/internal/logic"
	"github.com/tiptok/gz-blog-microsevices/app/post/cmd/rpc/internal/svc"
)

type PostServiceServer struct {
	svcCtx *svc.ServiceContext
	v1.UnimplementedPostServiceServer
}

func NewPostServiceServer(svcCtx *svc.ServiceContext) *PostServiceServer {
	return &PostServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *PostServiceServer) GetPost(ctx context.Context, in *v1.GetPostRequest) (*v1.GetPostResponse, error) {
	l := logic.NewGetPostLogic(ctx, s.svcCtx)
	return l.GetPost(in)
}

func (s *PostServiceServer) CreatePost(ctx context.Context, in *v1.CreatePostRequest) (*v1.CreatePostResponse, error) {
	l := logic.NewCreatePostLogic(ctx, s.svcCtx)
	return l.CreatePost(in)
}

func (s *PostServiceServer) UpdatePost(ctx context.Context, in *v1.UpdatePostRequest) (*v1.UpdatePostResponse, error) {
	l := logic.NewUpdatePostLogic(ctx, s.svcCtx)
	return l.UpdatePost(in)
}

func (s *PostServiceServer) DeletePost(ctx context.Context, in *v1.DeletePostRequest) (*v1.DeletePostResponse, error) {
	l := logic.NewDeletePostLogic(ctx, s.svcCtx)
	return l.DeletePost(in)
}

func (s *PostServiceServer) DeletePostCompensate(ctx context.Context, in *v1.DeletePostRequest) (*v1.DeletePostResponse, error) {
	l := logic.NewDeletePostCompensateLogic(ctx, s.svcCtx)
	return l.DeletePostCompensate(in)
}

func (s *PostServiceServer) ListPosts(ctx context.Context, in *v1.ListPostsRequest) (*v1.ListPostsResponse, error) {
	l := logic.NewListPostsLogic(ctx, s.svcCtx)
	return l.ListPosts(in)
}

func (s *PostServiceServer) IncrementCommentsCount(ctx context.Context, in *v1.IncrementCommentsCountRequest) (*v1.IncrementCommentsCountResponse, error) {
	l := logic.NewIncrementCommentsCountLogic(ctx, s.svcCtx)
	return l.IncrementCommentsCount(in)
}

func (s *PostServiceServer) IncrementCommentsCountCompensate(ctx context.Context, in *v1.IncrementCommentsCountRequest) (*v1.IncrementCommentsCountResponse, error) {
	l := logic.NewIncrementCommentsCountCompensateLogic(ctx, s.svcCtx)
	return l.IncrementCommentsCountCompensate(in)
}

func (s *PostServiceServer) DecrementCommentsCount(ctx context.Context, in *v1.DecrementCommentsCountRequest) (*v1.DecrementCommentsCountResponse, error) {
	l := logic.NewDecrementCommentsCountLogic(ctx, s.svcCtx)
	return l.DecrementCommentsCount(in)
}

func (s *PostServiceServer) DecrementCommentsCountCompensate(ctx context.Context, in *v1.DecrementCommentsCountRequest) (*v1.DecrementCommentsCountResponse, error) {
	l := logic.NewDecrementCommentsCountCompensateLogic(ctx, s.svcCtx)
	return l.DecrementCommentsCountCompensate(in)
}
