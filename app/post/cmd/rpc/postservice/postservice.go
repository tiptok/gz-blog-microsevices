// Code generated by goctl. DO NOT EDIT!
// Source: post.proto

package postservice

import (
	"context"

	"github.com/tiptok/gz-blog-microsevices/api/protobuf/post/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePostRequest              = v1.CreatePostRequest
	CreatePostResponse             = v1.CreatePostResponse
	DecrementCommentsCountRequest  = v1.DecrementCommentsCountRequest
	DecrementCommentsCountResponse = v1.DecrementCommentsCountResponse
	DeletePostRequest              = v1.DeletePostRequest
	DeletePostResponse             = v1.DeletePostResponse
	GetPostRequest                 = v1.GetPostRequest
	GetPostResponse                = v1.GetPostResponse
	IncrementCommentsCountRequest  = v1.IncrementCommentsCountRequest
	IncrementCommentsCountResponse = v1.IncrementCommentsCountResponse
	ListPostsRequest               = v1.ListPostsRequest
	ListPostsResponse              = v1.ListPostsResponse
	Post                           = v1.Post
	UpdatePostRequest              = v1.UpdatePostRequest
	UpdatePostResponse             = v1.UpdatePostResponse

	PostService interface {
		GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
		CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
		UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
		DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
		DeletePostCompensate(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
		ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
		IncrementCommentsCount(ctx context.Context, in *IncrementCommentsCountRequest, opts ...grpc.CallOption) (*IncrementCommentsCountResponse, error)
		IncrementCommentsCountCompensate(ctx context.Context, in *IncrementCommentsCountRequest, opts ...grpc.CallOption) (*IncrementCommentsCountResponse, error)
		DecrementCommentsCount(ctx context.Context, in *DecrementCommentsCountRequest, opts ...grpc.CallOption) (*DecrementCommentsCountResponse, error)
		DecrementCommentsCountCompensate(ctx context.Context, in *DecrementCommentsCountRequest, opts ...grpc.CallOption) (*DecrementCommentsCountResponse, error)
	}

	defaultPostService struct {
		cli zrpc.Client
	}
)

func NewPostService(cli zrpc.Client) PostService {
	return &defaultPostService{
		cli: cli,
	}
}

func (m *defaultPostService) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.GetPost(ctx, in, opts...)
}

func (m *defaultPostService) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultPostService) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultPostService) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

func (m *defaultPostService) DeletePostCompensate(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.DeletePostCompensate(ctx, in, opts...)
}

func (m *defaultPostService) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.ListPosts(ctx, in, opts...)
}

func (m *defaultPostService) IncrementCommentsCount(ctx context.Context, in *IncrementCommentsCountRequest, opts ...grpc.CallOption) (*IncrementCommentsCountResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.IncrementCommentsCount(ctx, in, opts...)
}

func (m *defaultPostService) IncrementCommentsCountCompensate(ctx context.Context, in *IncrementCommentsCountRequest, opts ...grpc.CallOption) (*IncrementCommentsCountResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.IncrementCommentsCountCompensate(ctx, in, opts...)
}

func (m *defaultPostService) DecrementCommentsCount(ctx context.Context, in *DecrementCommentsCountRequest, opts ...grpc.CallOption) (*DecrementCommentsCountResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.DecrementCommentsCount(ctx, in, opts...)
}

func (m *defaultPostService) DecrementCommentsCountCompensate(ctx context.Context, in *DecrementCommentsCountRequest, opts ...grpc.CallOption) (*DecrementCommentsCountResponse, error) {
	client := v1.NewPostServiceClient(m.cli.Conn())
	return client.DecrementCommentsCountCompensate(ctx, in, opts...)
}
