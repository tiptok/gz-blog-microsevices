syntax = "proto3";

package api.protobuf.blog.v1;

option go_package = "./api/protobuf/blog/v1";

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service BlogService {
  rpc SignUp (SignUpRequest) returns (SignUpResponse) {
    option (google.api.http) = {
      post: "/api.rest.blog.v1/sign-up"
      body: "*"
    };
  }
  rpc SignIn (SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      post: "/api.rest.blog.v1/sign-in"
      body: "*"
    };
  }
  rpc CreatePost (CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/api.rest.blog.v1/posts"
      body: "*"
    };
  }

  rpc GetPost (GetPostRequest) returns (GetPostResponse) {
    option (google.api.http) = {
      get: "/api.rest.blog.v1/posts/{id}"
    };
  }

  rpc ListPosts (ListPostsRequest) returns (ListPostsResponse) {
    option (google.api.http) = {
      get: "/api.rest.blog.v1/posts"
    };
  }

  rpc UpdatePost (UpdatePostRequest) returns (UpdatePostResponse) {
    option (google.api.http) = {
      put: "/api.rest.blog.v1/posts/{post.id}"
      body: "*"
    };
  }

  rpc DeletePost (DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/api.rest.blog.v1/posts/{id}"
    };
  }

  rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      post: "/api.rest.blog.v1/comments"
      body: "*"
    };
  }

  rpc DeleteComment (DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (google.api.http) = {
      delete: "/api.rest.blog.v1/comments/{id}"
    };
  }

  rpc UpdateComment (UpdateCommentRequest) returns (UpdateCommentResponse) {
    option (google.api.http) = {
      put: "/api.rest.blog.v1/comments/{comment.id}"
      body: "*"
    };
  }

  rpc ListCommentsByPostID (ListCommentsByPostIDRequest) returns (ListCommentsByPostIDResponse) {
    option (google.api.http) = {
      get: "/api.rest.blog.v1/comments"
    };
  }
}

message User {
  uint64 id = 1;
  string username = 2;
  string avatar = 3;
}

message Post {
  uint64 id = 1;
  string title = 2 [(validate.rules).string = {min_len: 1, max_len: 140}];
  string content = 3 [(validate.rules).string = {min_len: 1, max_len: 3000}];
  uint64 user_id = 4;
  uint32 comments_count = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  User user = 8;
}

message Comment {
  uint64 id = 1;
  string content = 2 [(validate.rules).string = {min_len: 1, max_len: 140}];
  uint64 post_id = 3;
  uint64 user_id = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  Post post = 7;
  User user = 8;
}

message SignUpRequest {
  string username = 1 [(validate.rules).string = {min_len: 1, max_len: 30}];
  string email = 2 [(validate.rules).string.email = true];
  string password = 3;
}

message SignUpResponse {
  string token = 1;
}

message SignInRequest {
  oneof request {
    string username = 1 [(validate.rules).string = {min_len: 1, max_len: 30}];
    string email = 2 [(validate.rules).string.email = true];
  }
  string password = 3;
}

message SignInResponse {
  string token = 1;
}

message CreatePostRequest {
  Post post = 1;
}

message CreatePostResponse {
  Post post = 1;
}

message DeletePostRequest {
  uint64 id = 1;
}

message DeletePostResponse {
  bool success = 1;
}

message CreateCommentRequest {
  Comment comment = 1;
}

message CreateCommentResponse {
  Comment comment = 1;
}

message UpdateCommentRequest {
  Comment comment = 1;
}

message UpdateCommentResponse {
  bool success = 1;
}


message DeleteCommentRequest {
  uint64 id = 1;
}

message DeleteCommentResponse {
  bool success = 1;
}

message GetPostRequest {
  uint64 id = 1;
}

message GetPostResponse {
  Post post = 1;
}

message UpdatePostRequest {
  Post post = 1;
}

message UpdatePostResponse {
  bool success = 1;
}

message ListPostsRequest {
  uint32 offset = 1;
  uint32 limit = 2;
}

message ListPostsResponse {
  repeated Post posts = 1;
  uint64 total = 2;
}

message ListCommentsByPostIDRequest {
  uint64 post_id = 1;
  uint32 offset = 2;
  uint32 limit = 3;
}

message ListCommentsByPostIDResponse {
  repeated Comment comments = 1;
  uint64 total = 2;
}